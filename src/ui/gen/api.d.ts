/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/sunspec/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["sunspecData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/siteRealPower": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["siteRealPower"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/derRealPower": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["derRealPower"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/loadRealPower": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["loadRealPower"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/exportLimit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["exportLimit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/generationLimit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["generationLimit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/importLimit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["importLimit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/loadLimit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["loadLimit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/connection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["connection"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/data/energize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["energize"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/csipAus/id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get CSIP-AUS device certificate LFID and SFDI */
        get: operations["csipAusStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/csipAus/exportLimitSchedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["exportLimitSchedule"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/csipAus/generationLimitSchedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["generationLimitSchedule"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/csipAus/importLimitSchedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["importLimitSchedule"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/csipAus/loadLimitSchedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["loadLimitSchedule"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/csipAus/connectionSchedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["connectionSchedule"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/csipAus/energizeSchedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["energizeSchedule"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/coordinator/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["coordinatorStart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/coordinator/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["coordinatorStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/coordinator/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["coordinatorStop"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Common
         *
         *     All SunSpec compliant devices must include this as the first model */
        CommonModel: {
            /**
             * Format: double
             * @description Device Address
             *
             *     Modbus device address
             *
             *     This point is mandatory for all SunSpec RTU devices and, for those devices, they must support values from 1-247.
             */
            DA: number | null;
            /** @description Serial Number
             *
             *     Manufacturer specific value (32 chars) */
            SN: string;
            /** @description Version
             *
             *     Manufacturer specific value (16 chars) */
            Vr: string | null;
            /** @description Options
             *
             *     Manufacturer specific value (16 chars) */
            Opt: string | null;
            /** @description Model
             *
             *     Manufacturer specific value (32 chars) */
            Md: string;
            /** @description Manufacturer
             *
             *     Well known value registered with SunSpec for compliance */
            Mn: string;
            /**
             * Format: double
             * @description Model Length
             *
             *     Model length
             */
            L: number;
            /**
             * @description Model ID
             *
             *     Model identifier
             * @enum {number}
             */
            ID: 1;
        };
        /**
         * @description MeterEvent Enumeration
         *
         *     Bitmask values representing Meter Event Flags.
         * @enum {number}
         */
        MeterEvent: 4 | 8 | 16 | 32 | 64 | 128 | 65536 | 131072 | 262144 | 524288 | 1048576 | 2097152 | 4194304 | 8388608 | 16777216 | 33554432 | 67108864 | 134217728 | 268435456 | 536870912 | 1073741824;
        /** @description Meter (Single Phase, Split-Phase, Three Phase)
         *
         *     A combination of the three models for single phase, split-phase, and three phase meters */
        MeterModel: {
            /** @description Evt
             *
             *     Meter Event Flags. */
            Evt: components["schemas"]["MeterEvent"];
            /**
             * Format: double
             * @description TotVArh_SF
             *
             *     Reactive Energy scale factor.
             */
            TotVArh_SF: number | null;
            /**
             * Format: double
             * @description TotVArhExpQ4PhC
             *
             *     Reactive Power Exported Q4 phase C.
             */
            TotVArhExpQ4PhC: number | null;
            /**
             * Format: double
             * @description TotVArhExpQ4PhB
             *
             *     Reactive Power Exported Q4 phase B.
             */
            TotVArhExpQ4PhB: number | null;
            /**
             * Format: double
             * @description TotVArhExpQ4PhA
             *
             *     Reactive Power Exported Q4 phase A.
             */
            TotVArhExpQ4PhA: number | null;
            /**
             * Format: double
             * @description TotVArhExpQ4
             *
             *     Total Reactive Power Exported Quadrant 4.
             */
            TotVArhExpQ4: number;
            /**
             * Format: double
             * @description TotVArhExpQ3PhC
             *
             *     Reactive Power Exported Q3 phase C.
             */
            TotVArhExpQ3PhC: number | null;
            /**
             * Format: double
             * @description TotVArhExpQ3PhB
             *
             *     Reactive Power Exported Q3 phase B.
             */
            TotVArhExpQ3PhB: number | null;
            /**
             * Format: double
             * @description TotVArhExpQ3PhA
             *
             *     Reactive Power Exported Q3 phase A.
             */
            TotVArhExpQ3PhA: number | null;
            /**
             * Format: double
             * @description TotVArhExpQ3
             *
             *     Total Reactive Power Exported Quadrant 3.
             */
            TotVArhExpQ3: number;
            /**
             * Format: double
             * @description TotVArhImpQ2PhC
             *
             *     Reactive Power Imported Q2 phase C.
             */
            TotVArhImpQ2PhC: number | null;
            /**
             * Format: double
             * @description TotVArhImpQ2PhB
             *
             *     Reactive Power Imported Q2 phase B.
             */
            TotVArhImpQ2PhB: number | null;
            /**
             * Format: double
             * @description TotVArhImpQ2PhA
             *
             *     Reactive Power Imported Q2 phase A.
             */
            TotVArhImpQ2PhA: number | null;
            /**
             * Format: double
             * @description TotVArhImpQ2
             *
             *     Total Reactive Power Imported Quadrant 2.
             */
            TotVArhImpQ2: number;
            /**
             * Format: double
             * @description TotVArhImpQ1PhC
             *
             *     Reactive Energy Imported Q1 phase C.
             */
            TotVArhImpQ1PhC: number | null;
            /**
             * Format: double
             * @description TotVArhImpQ1PhB
             *
             *     Reactive Energy Imported Q1 phase B.
             */
            TotVArhImpQ1PhB: number | null;
            /**
             * Format: double
             * @description TotVArhImpQ1PhA
             *
             *     Reactive Energy Imported Q1 phase A.
             */
            TotVArhImpQ1PhA: number | null;
            /**
             * Format: double
             * @description TotVArhImpQ1
             *
             *     Total Reactive Energy Imported Quadrant 1.
             */
            TotVArhImpQ1: number;
            /**
             * Format: double
             * @description TotVAh_SF
             *
             *     Apparent Energy scale factor.
             */
            TotVAh_SF: number | null;
            /**
             * Format: double
             * @description TotVAhImpPhC
             *
             *     Apparent Energy Imported phase C.
             */
            TotVAhImpPhC: number | null;
            /**
             * Format: double
             * @description TotVAhImpPhB
             *
             *     Apparent Energy Imported phase B.
             */
            TotVAhImpPhB: number | null;
            /**
             * Format: double
             * @description TotVAhImpPhA
             *
             *     Apparent Energy Imported phase A.
             */
            TotVAhImpPhA: number | null;
            /**
             * Format: double
             * @description TotVAhImp
             *
             *     Total Apparent Energy Imported.
             */
            TotVAhImp: number;
            /**
             * Format: double
             * @description TotVAhExpPhC
             *
             *     Apparent Energy Exported phase C.
             */
            TotVAhExpPhC: number | null;
            /**
             * Format: double
             * @description TotVAhExpPhB
             *
             *     Apparent Energy Exported phase B.
             */
            TotVAhExpPhB: number | null;
            /**
             * Format: double
             * @description TotVAhExpPhA
             *
             *     Apparent Energy Exported phase A.
             */
            TotVAhExpPhA: number | null;
            /**
             * Format: double
             * @description TotVAhExp
             *
             *     Total Apparent Energy Exported.
             */
            TotVAhExp: number;
            /**
             * Format: double
             * @description TotWh_SF
             *
             *     Real Energy scale factor.
             */
            TotWh_SF: number;
            /**
             * Format: double
             * @description TotWhImpPhC
             *
             *     Real Energy Imported phase C.
             */
            TotWhImpPhC: number | null;
            /**
             * Format: double
             * @description TotWhImpPhB
             *
             *     Real Energy Imported phase B.
             */
            TotWhImpPhB: number | null;
            /**
             * Format: double
             * @description TotWhImpPhA
             *
             *     Real Energy Imported phase A.
             */
            TotWhImpPhA: number | null;
            /**
             * Format: double
             * @description TotWhImp
             *
             *     Total Real Energy Imported.
             */
            TotWhImp: number;
            /**
             * Format: double
             * @description TotWhExpPhC
             *
             *     Real Energy Exported phase C.
             */
            TotWhExpPhC: number | null;
            /**
             * Format: double
             * @description TotWhExpPhB
             *
             *     Real Energy Exported phase B.
             */
            TotWhExpPhB: number | null;
            /**
             * Format: double
             * @description TotWhExpPhA
             *
             *     Real Energy Exported phase A.
             */
            TotWhExpPhA: number | null;
            /**
             * Format: double
             * @description TotWhExp
             *
             *     Total Real Energy Exported.
             */
            TotWhExp: number;
            /**
             * Format: double
             * @description PF_SF
             *
             *     Power Factor scale factor.
             */
            PF_SF: number | null;
            /**
             * Format: double
             * @description PFphC
             *
             *     Power Factor phase C.
             */
            PFphC: number | null;
            /**
             * Format: double
             * @description PFphB
             *
             *     Power Factor phase B.
             */
            PFphB: number | null;
            /**
             * Format: double
             * @description PFphA
             *
             *     Power Factor phase A.
             */
            PFphA: number | null;
            /**
             * Format: double
             * @description PF
             *
             *     Power Factor.
             */
            PF: number | null;
            /**
             * Format: double
             * @description VAR_SF
             *
             *     Reactive Power scale factor.
             */
            VAR_SF: number | null;
            /**
             * Format: double
             * @description VARphC
             *
             *     Reactive Power phase C.
             */
            VARphC: number | null;
            /**
             * Format: double
             * @description VARphB
             *
             *     Reactive Power phase B.
             */
            VARphB: number | null;
            /**
             * Format: double
             * @description VARphA
             *
             *     Reactive Power phase A.
             */
            VARphA: number | null;
            /**
             * Format: double
             * @description VAR
             *
             *     Reactive Power.
             */
            VAR: number | null;
            /**
             * Format: double
             * @description VA_SF
             *
             *     Apparent Power scale factor.
             */
            VA_SF: number | null;
            /**
             * Format: double
             * @description VAphC
             *
             *     Apparent Power phase C.
             */
            VAphC: number | null;
            /**
             * Format: double
             * @description VAphB
             *
             *     Apparent Power phase B.
             */
            VAphB: number | null;
            /**
             * Format: double
             * @description VAphA
             *
             *     Apparent Power phase A.
             */
            VAphA: number | null;
            /**
             * Format: double
             * @description VA
             *
             *     AC Apparent Power.
             */
            VA: number | null;
            /**
             * Format: double
             * @description W_SF
             *
             *     Real Power scale factor.
             */
            W_SF: number;
            /**
             * Format: double
             * @description WphC
             *
             *     Real Power phase C.
             */
            WphC: number | null;
            /**
             * Format: double
             * @description WphB
             *
             *     Real Power phase B.
             */
            WphB: number | null;
            /**
             * Format: double
             * @description WphA
             *
             *     Real Power phase A.
             */
            WphA: number | null;
            /**
             * Format: double
             * @description W
             *
             *     Total Real Power.
             */
            W: number;
            /**
             * Format: double
             * @description Hz_SF
             *
             *     Frequency scale factor.
             */
            Hz_SF: number;
            /**
             * Format: double
             * @description Hz
             *
             *     Frequency.
             */
            Hz: number;
            /**
             * Format: double
             * @description V_SF
             *
             *     Voltage scale factor.
             */
            V_SF: number;
            /**
             * Format: double
             * @description PPVphCA
             *
             *     Phase Voltage CA.
             */
            PPVphCA: number | null;
            /**
             * Format: double
             * @description PPVphBC
             *
             *     Phase Voltage BC.
             */
            PPVphBC: number | null;
            /**
             * Format: double
             * @description PPVphAB
             *
             *     Phase Voltage AB.
             */
            PPVphAB: number | null;
            /**
             * Format: double
             * @description PPV
             *
             *     Line to Line AC Voltage (average of active phases).
             */
            PPV: number | null;
            /**
             * Format: double
             * @description PhVphC
             *
             *     Phase Voltage CN.
             */
            PhVphC: number | null;
            /**
             * Format: double
             * @description PhVphB
             *
             *     Phase Voltage BN.
             */
            PhVphB: number | null;
            /**
             * Format: double
             * @description PhVphA
             *
             *     Phase Voltage AN.
             */
            PhVphA: number | null;
            /**
             * Format: double
             * @description PhV
             *
             *     Line to Neutral AC Voltage (average of active phases).
             */
            PhV: number | null;
            /**
             * Format: double
             * @description A_SF
             *
             *     Current scale factor.
             */
            A_SF: number;
            /**
             * Format: double
             * @description AphC
             *
             *     Phase C Current.
             */
            AphC: number | null;
            /**
             * Format: double
             * @description AphB
             *
             *     Phase B Current.
             */
            AphB: number | null;
            /**
             * Format: double
             * @description AphA
             *
             *     Phase A Current.
             */
            AphA: number | null;
            /**
             * Format: double
             * @description A
             *
             *     Total AC Current.
             */
            A: number;
            /**
             * Format: double
             * @description Model Length
             *
             *     Model length.
             */
            L: number;
            /**
             * @description Model ID
             *
             *     Model identifier.
             * @enum {number}
             */
            ID: 201 | 202 | 203;
        };
        /**
         * @description InverterState Enumeration
         *
         *     Enumerated values representing the operating state of the inverter
         * @enum {number}
         */
        InverterState: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
        /**
         * @description InverterEvent1 Bitfield Enumeration
         *
         *     Bitmask values representing various event fields
         * @enum {number}
         */
        InverterEvent1: 1 | 2 | 4 | 8 | 16 | 32 | 64 | 128 | 256 | 512 | 1024 | 2048 | 4096 | 8192 | 16384 | 32768;
        /** @description Inverter (Single Phase, Split-Phase, Three Phase)
         *
         *     A combination of the three models for single phase, split-phase, and three phase inverters */
        InverterModel: {
            /**
             * Format: double
             * @description Vendor Event Bitfield 4
             *
             *     Vendor defined events
             */
            EvtVnd4: number | null;
            /**
             * Format: double
             * @description Vendor Event Bitfield 3
             *
             *     Vendor defined events
             */
            EvtVnd3: number | null;
            /**
             * Format: double
             * @description Vendor Event Bitfield 2
             *
             *     Vendor defined events
             */
            EvtVnd2: number | null;
            /**
             * Format: double
             * @description Vendor Event Bitfield 1
             *
             *     Vendor defined events
             */
            EvtVnd1: number | null;
            /**
             * Format: double
             * @description Event Bitfield 2
             *
             *     Reserved for future use
             */
            Evt2: number;
            /** @description Event1
             *
             *     Bitmask value. Event fields */
            Evt1: components["schemas"]["InverterEvent1"];
            /**
             * Format: double
             * @description Vendor Operating State
             *
             *     Vendor specific operating state code
             */
            StVnd: number | null;
            /** @description Operating State
             *
             *     Enumerated value. Operating state */
            St: components["schemas"]["InverterState"];
            /**
             * Format: double
             * @description Scale Factor for Temperature
             */
            Tmp_SF: number | null;
            /**
             * Format: double
             * @description Other Temperature
             *
             *     Other Temperature
             */
            TmpOt: number | null;
            /**
             * Format: double
             * @description Transformer Temperature
             *
             *     Transformer Temperature
             */
            TmpTrns: number | null;
            /**
             * Format: double
             * @description Heat Sink Temperature
             *
             *     Heat Sink Temperature
             */
            TmpSnk: number | null;
            /**
             * Format: double
             * @description Cabinet Temperature
             *
             *     Cabinet Temperature
             */
            TmpCab: number | null;
            /**
             * Format: double
             * @description Scale Factor for DC Power
             */
            DCW_SF: number | null;
            /**
             * Format: double
             * @description DC Watts
             *
             *     DC Power
             */
            DCW: number | null;
            /**
             * Format: double
             * @description Scale Factor for DC Voltage
             */
            DCV_SF: number | null;
            /**
             * Format: double
             * @description DC Voltage
             *
             *     DC Voltage
             */
            DCV: number | null;
            /**
             * Format: double
             * @description Scale Factor for DC Current
             */
            DCA_SF: number | null;
            /**
             * Format: double
             * @description DC Amps
             *
             *     DC Current
             */
            DCA: number | null;
            /**
             * Format: double
             * @description Scale Factor for Energy
             */
            WH_SF: number;
            /**
             * Format: double
             * @description AC Energy
             *
             *     AC Energy
             */
            WH: number;
            /**
             * Format: double
             * @description Scale Factor for Power Factor
             */
            PF_SF: number | null;
            /**
             * Format: double
             * @description AC Power Factor
             *
             *     AC Power Factor
             */
            PF: number | null;
            /**
             * Format: double
             * @description Scale Factor for Reactive Power
             */
            VAr_SF: number | null;
            /**
             * Format: double
             * @description AC Reactive Power
             *
             *     AC Reactive Power
             */
            VAr: number | null;
            /**
             * Format: double
             * @description Scale Factor for Apparent Power
             */
            VA_SF: number | null;
            /**
             * Format: double
             * @description AC Apparent Power
             *
             *     AC Apparent Power
             */
            VA: number | null;
            /**
             * Format: double
             * @description Scale Factor for Frequency
             */
            Hz_SF: number;
            /**
             * Format: double
             * @description Line Frequency
             *
             *     Line Frequency
             */
            Hz: number;
            /**
             * Format: double
             * @description Scale Factor for Power
             */
            W_SF: number;
            /**
             * Format: double
             * @description AC Power
             *
             *     AC Power
             */
            W: number;
            /**
             * Format: double
             * @description Scale Factor for Voltage
             */
            V_SF: number;
            /**
             * Format: double
             * @description Phase Voltage CN
             *
             *     Phase Voltage CN
             */
            PhVphC: number | null;
            /**
             * Format: double
             * @description Phase Voltage BN
             *
             *     Phase Voltage BN
             */
            PhVphB: number | null;
            /**
             * Format: double
             * @description Phase Voltage AN
             *
             *     Phase Voltage AN
             */
            PhVphA: number;
            /**
             * Format: double
             * @description Phase Voltage CA
             *
             *     Phase Voltage CA
             */
            PPVphCA: number | null;
            /**
             * Format: double
             * @description Phase Voltage BC
             *
             *     Phase Voltage BC
             */
            PPVphBC: number | null;
            /**
             * Format: double
             * @description Phase Voltage AB
             *
             *     Phase Voltage AB
             */
            PPVphAB: number | null;
            /**
             * Format: double
             * @description Scale Factor for Current
             */
            A_SF: number;
            /**
             * Format: double
             * @description Phase C Current
             *
             *     Phase C Current
             */
            AphC: number | null;
            /**
             * Format: double
             * @description Phase B Current
             *
             *     Phase B Current
             */
            AphB: number | null;
            /**
             * Format: double
             * @description Phase A Current
             *
             *     Phase A Current
             */
            AphA: number;
            /**
             * Format: double
             * @description AC Current
             *
             *     AC Current
             */
            A: number;
            /**
             * Format: double
             * @description Model Length
             *
             *     Model length
             */
            L: number;
            /**
             * @description Model ID
             *
             *     Model identifier
             * @enum {number}
             */
            ID: 101 | 102 | 103;
        };
        /**
         * @description Type of DER device Enumeration
         *
         *     Enumerated values representing the type of DER device.
         * @enum {number}
         */
        DERTyp: 4 | 82;
        /** @description Nameplate
         *
         *     Inverter Controls Nameplate Ratings */
        NameplateModel: {
            /**
             * Format: double
             * @description MaxDisChaRte_SF
             *
             *     Scale factor
             */
            MaxDisChaRte_SF: number | null;
            /**
             * Format: double
             * @description MaxDisChaRte
             *
             *     Maximum rate of energy transfer out of the storage device.
             */
            MaxDisChaRte: number | null;
            /**
             * Format: double
             * @description MaxChaRte_SF
             *
             *     Scale factor
             */
            MaxChaRte_SF: number | null;
            /**
             * Format: double
             * @description MaxChaRte
             *
             *     Maximum rate of energy transfer into the storage device.
             */
            MaxChaRte: number | null;
            /**
             * Format: double
             * @description AhrRtg_SF
             *
             *     Scale factor
             */
            AhrRtg_SF: number | null;
            /**
             * Format: double
             * @description AhrRtg
             *
             *     The usable capacity of the battery. Maximum charge minus minimum charge from a technology capability perspective (Amp-hour capacity rating).
             */
            AhrRtg: number | null;
            /**
             * Format: double
             * @description WHRtg_SF
             *
             *     Scale factor
             */
            WHRtg_SF: number | null;
            /**
             * Format: double
             * @description WHRtg
             *
             *     Nominal energy rating of storage device.
             */
            WHRtg: number | null;
            /**
             * Format: double
             * @description PFRtg_SF
             *
             *     Scale factor
             */
            PFRtg_SF: number;
            /**
             * Format: double
             * @description PFRtgQ4
             *
             *     Minimum power factor capability of the inverter in quadrant 4.
             */
            PFRtgQ4: number;
            /**
             * Format: double
             * @description PFRtgQ3
             *
             *     Minimum power factor capability of the inverter in quadrant 3.
             */
            PFRtgQ3: number | null;
            /**
             * Format: double
             * @description PFRtgQ2
             *
             *     Minimum power factor capability of the inverter in quadrant 2.
             */
            PFRtgQ2: number | null;
            /**
             * Format: double
             * @description PFRtgQ1
             *
             *     Minimum power factor capability of the inverter in quadrant 1.
             */
            PFRtgQ1: number;
            /**
             * Format: double
             * @description ARtg_SF
             *
             *     Scale factor
             */
            ARtg_SF: number;
            /**
             * Format: double
             * @description ARtg
             *
             *     Maximum RMS AC current level capability of the inverter.
             */
            ARtg: number;
            /**
             * Format: double
             * @description VArRtg_SF
             *
             *     Scale factor
             */
            VArRtg_SF: number;
            /**
             * Format: double
             * @description VArRtgQ4
             *
             *     Continuous VAR capability of the inverter in quadrant 4.
             */
            VArRtgQ4: number;
            /**
             * Format: double
             * @description VArRtgQ3
             *
             *     Continuous VAR capability of the inverter in quadrant 3.
             */
            VArRtgQ3: number | null;
            /**
             * Format: double
             * @description VArRtgQ2
             *
             *     Continuous VAR capability of the inverter in quadrant 2.
             */
            VArRtgQ2: number | null;
            /**
             * Format: double
             * @description VArRtgQ1
             *
             *     Continuous VAR capability of the inverter in quadrant 1.
             */
            VArRtgQ1: number;
            /**
             * Format: double
             * @description VARtg_SF
             *
             *     Scale factor
             */
            VARtg_SF: number;
            /**
             * Format: double
             * @description VARtg
             *
             *     Continuous Volt-Ampere capability of the inverter.
             */
            VARtg: number;
            /**
             * Format: double
             * @description WRtg_SF
             *
             *     Scale factor
             */
            WRtg_SF: number;
            /**
             * Format: double
             * @description WRtg
             *
             *     Continuous power output capability of the inverter.
             */
            WRtg: number;
            /** @description Type of DER device
             *
             *     Type of DER device. Default value is 4 to indicate PV device. */
            DERTyp: components["schemas"]["DERTyp"];
            /**
             * Format: double
             * @description Model Length
             *
             *     Model length
             */
            L: number;
            /**
             * @description Model ID
             *
             *     Model identifier
             * @enum {number}
             */
            ID: 120;
        };
        /**
         * @description VArAct Enumeration
         *
         *     Enumerated values representing VAR action on change between charging and discharging.
         * @enum {number}
         */
        VArAct: 1 | 2;
        /**
         * @description ClcTotVA Enumeration
         *
         *     Enumerated values representing the calculation method for total apparent power.
         * @enum {number}
         */
        ClcTotVA: 1 | 2;
        /**
         * @description ConnPh Enumeration
         *
         *     Enumerated values representing the identity of connected phase for single phase inverters.
         * @enum {number}
         */
        ConnPh: 1 | 2 | 3;
        /** @description Settings
         *
         *     Inverter Controls Basic Settings */
        SettingsModel: {
            /**
             * Format: double
             * @description ECPNomHz_SF
             *
             *     Scale factor for nominal frequency.
             */
            ECPNomHz_SF: number | null;
            /**
             * Format: double
             * @description MaxRmpRte_SF
             *
             *     Scale factor for maximum ramp percentage.
             */
            MaxRmpRte_SF: number | null;
            /**
             * Format: double
             * @description PFMin_SF
             *
             *     Scale factor for minimum power factor.
             */
            PFMin_SF: number | null;
            /**
             * Format: double
             * @description WGra_SF
             *
             *     Scale factor for default ramp rate.
             */
            WGra_SF: number | null;
            /**
             * Format: double
             * @description VArMax_SF
             *
             *     Scale factor for reactive power.
             */
            VArMax_SF: number | null;
            /**
             * Format: double
             * @description VAMax_SF
             *
             *     Scale factor for apparent power.
             */
            VAMax_SF: number | null;
            /**
             * Format: double
             * @description VMinMax_SF
             *
             *     Scale factor for min/max voltages.
             */
            VMinMax_SF: number | null;
            /**
             * Format: double
             * @description VRefOfs_SF
             *
             *     Scale factor for offset voltage.
             */
            VRefOfs_SF: number;
            /**
             * Format: double
             * @description VRef_SF
             *
             *     Scale factor for voltage at the PCC.
             */
            VRef_SF: number;
            /**
             * Format: double
             * @description WMax_SF
             *
             *     Scale factor for real power.
             */
            WMax_SF: number;
            /** @description ConnPh
             *
             *     Identity of connected phase for single phase inverters. A=1 B=2 C=3. */
            ConnPh: components["schemas"]["ConnPh"] | null;
            /**
             * Format: double
             * @description ECPNomHz
             *
             *     Setpoint for nominal frequency at the ECP.
             */
            ECPNomHz: number | null;
            /**
             * Format: double
             * @description MaxRmpRte
             *
             *     Setpoint for maximum ramp rate as percentage of nominal maximum ramp rate. This setting will limit the rate that watts delivery to the grid can increase or decrease in response to intermittent PV generation.
             */
            MaxRmpRte: number | null;
            /** @description ClcTotVA
             *
             *     Calculation method for total apparent power. 1=vector 2=arithmetic. */
            ClcTotVA: components["schemas"]["ClcTotVA"] | null;
            /** @description VArAct
             *
             *     VAR action on change between charging and discharging: 1=switch 2=maintain VAR characterization. */
            VArAct: components["schemas"]["VArAct"] | null;
            /**
             * Format: double
             * @description PFMinQ4
             *
             *     Setpoint for minimum power factor value in quadrant 4. Default to PFRtgQ4.
             */
            PFMinQ4: number;
            /**
             * Format: double
             * @description PFMinQ3
             *
             *     Setpoint for minimum power factor value in quadrant 3. Default to PFRtgQ3.
             */
            PFMinQ3: number | null;
            /**
             * Format: double
             * @description PFMinQ2
             *
             *     Setpoint for minimum power factor value in quadrant 2. Default to PFRtgQ2.
             */
            PFMinQ2: number | null;
            /**
             * Format: double
             * @description PFMinQ1
             *
             *     Setpoint for minimum power factor value in quadrant 1. Default to PFRtgQ1.
             */
            PFMinQ1: number;
            /**
             * Format: double
             * @description WGra
             *
             *     Default ramp rate of change of active power due to command or internal action.
             */
            WGra: number | null;
            /**
             * Format: double
             * @description VArMaxQ4
             *
             *     Setting for maximum reactive power in quadrant 4. Default to VArRtgQ4.
             */
            VArMaxQ4: number;
            /**
             * Format: double
             * @description VArMaxQ3
             *
             *     Setting for maximum reactive power in quadrant 3. Default to VArRtgQ3.
             */
            VArMaxQ3: number | null;
            /**
             * Format: double
             * @description VArMaxQ2
             *
             *     Setting for maximum reactive power in quadrant 2. Default to VArRtgQ2.
             */
            VArMaxQ2: number | null;
            /**
             * Format: double
             * @description VArMaxQ1
             *
             *     Setting for maximum reactive power in quadrant 1. Default to VArRtgQ1.
             */
            VArMaxQ1: number;
            /**
             * Format: double
             * @description VAMax
             *
             *     Setpoint for maximum apparent power. Default to VARtg.
             */
            VAMax: number | null;
            /**
             * Format: double
             * @description VMin
             *
             *     Setpoint for minimum voltage.
             */
            VMin: number | null;
            /**
             * Format: double
             * @description VMax
             *
             *     Setpoint for maximum voltage.
             */
            VMax: number | null;
            /**
             * Format: double
             * @description VRefOfs
             *
             *     Offset from PCC to inverter.
             */
            VRefOfs: number;
            /**
             * Format: double
             * @description VRef
             *
             *     Voltage at the PCC.
             */
            VRef: number;
            /**
             * Format: double
             * @description WMax
             *
             *     Setting for maximum power output. Default to WRtg.
             */
            WMax: number;
            /**
             * Format: double
             * @description Model Length
             *
             *     Model length
             */
            L: number;
            /**
             * @description Model ID
             *
             *     Model identifier
             * @enum {number}
             */
            ID: 121;
        };
        /**
         * @description PVConn Enumeration
         *
         *     Bitmask values representing PV inverter present/available status.
         * @enum {number}
         */
        PVConn: 1 | 2 | 4 | 8;
        /**
         * @description StorConn Enumeration
         *
         *     Bitmask values representing Storage inverter present/available status.
         * @enum {number}
         */
        StorConn: 1 | 2 | 4 | 8;
        /**
         * @description ECPConn Enumeration
         *
         *     Enumerated values representing ECP connection status.
         * @enum {number}
         */
        ECPConn: 0 | 1;
        /**
         * @description StSetLimMsk Enumeration
         *
         *     Bitmask values indicating setpoint limits reached.
         * @enum {number}
         */
        StSetLimMsk: 1 | 2 | 4 | 8 | 16 | 32 | 64 | 128 | 256 | 512 | 1024;
        /**
         * @description StActCtl Enumeration
         *
         *     Bitmask values indicating which inverter controls are currently active.
         * @enum {number}
         */
        StActCtl: 1 | 2 | 4 | 8 | 16 | 32 | 64 | 128 | 256 | 512 | 1024 | 4096 | 8192 | 16384;
        /**
         * @description RtSt Enumeration
         *
         *     Bitmask values indicating active ride-through status.
         * @enum {number}
         */
        RtSt: 1 | 2 | 4 | 8;
        /**
         * @description DCSt Enumeration
         *
         *     Bitmask values representing the Operating State
         * @enum {number}
         */
        DcSt: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;
        /**
         * @description Evt Enumeration
         *
         *     Bitmask values representing the global events + module specific events
         * @enum {number}
         */
        MpptEvt: 1 | 2 | 4 | 8 | 16 | 32 | 64 | 128 | 256 | 512 | 1024 | 2048 | 4096 | 8192 | 16384 | 32768 | 65536 | 131072 | 262144 | 524288 | 1048576 | 2097152 | 4194304;
        MpptModuleModel: {
            /** @description DCEvt
             *
             *     Module Events */
            DcEvt: components["schemas"]["MpptEvt"] | null;
            /** @description DCSt
             *
             *     Operating State */
            DCSt: components["schemas"]["DcSt"] | null;
            /**
             * Format: double
             * @description Tmp
             *
             *     Temperature
             */
            Tmp: number | null;
            /**
             * Format: double
             * @description Tms
             *
             *     Timestamp
             */
            Tms: number | null;
            /**
             * Format: double
             * @description DCWH
             *
             *     Lifetime Energy
             */
            DCWH: number | null;
            /**
             * Format: double
             * @description DCW
             *
             *     DC Power
             */
            DCW: number | null;
            /**
             * Format: double
             * @description DCV
             *
             *     DC Voltage
             */
            DCV: number | null;
            /**
             * Format: double
             * @description DCA
             *
             *     DC Current
             */
            DCA: number | null;
            /** @description IDStr
             *
             *     Input ID String */
            IDStr: string | null;
            /**
             * Format: double
             * @description ID
             *
             *     Input ID
             */
            ID: number | null;
        };
        CertificateIds: {
            sfdi: string;
            lfdi: string;
        };
        DERControlBase: {
            /** Format: double */
            rampTms?: number;
            opModConnect?: boolean;
            opModEnergize?: boolean;
            opModLoadLimW?: {
                /** Format: double */
                multiplier: number;
                /** Format: double */
                value: number;
            };
            opModGenLimW?: {
                /** Format: double */
                multiplier: number;
                /** Format: double */
                value: number;
            };
            opModExpLimW?: {
                /** Format: double */
                multiplier: number;
                /** Format: double */
                value: number;
            };
            opModImpLimW?: {
                /** Format: double */
                multiplier: number;
                /** Format: double */
                value: number;
            };
        };
        /** @enum {number} */
        ResponseRequiredType: 1 | 2 | 4;
        ControlSchedule: {
            replyToHref?: string;
            responseRequired: components["schemas"]["ResponseRequiredType"];
            derControlBase: components["schemas"]["DERControlBase"];
            mRID: string;
            /** Format: double */
            randomizeDuration?: number;
            /** Format: double */
            randomizeStart?: number;
            /** Format: date-time */
            endExclusive: string;
            /** Format: date-time */
            startInclusive: string;
        };
        RandomizedControlSchedule: components["schemas"]["ControlSchedule"] & {
            /** Format: date-time */
            effectiveEndExclusive: string;
            /** Format: date-time */
            effectiveStartInclusive: string;
        };
        /** @enum {number} */
        OperationalModeStatusValue: 0 | 1 | 2 | 3;
        /** @enum {number} */
        ConnectStatusValue: 1 | 2 | 4 | 8 | 16;
        InverterData: {
            status: {
                genConnectStatus: components["schemas"]["ConnectStatusValue"];
                operationalModeStatus: components["schemas"]["OperationalModeStatusValue"];
            };
            settings: {
                /** Format: double */
                maxVar: number | null;
                /** Format: double */
                maxVA: number | null;
                /** Format: double */
                maxW: number;
            };
            nameplate: {
                /** Format: double */
                maxVar: number;
                /** Format: double */
                maxVA: number;
                /** Format: double */
                maxW: number;
                type: components["schemas"]["DERTyp"];
            };
            inverter: {
                /** Format: double */
                frequency: number;
                /** Format: double */
                voltagePhaseC: number | null;
                /** Format: double */
                voltagePhaseB: number | null;
                /** Format: double */
                voltagePhaseA: number | null;
                /** Format: double */
                reactivePower: number;
                /** Format: double */
                realPower: number;
            };
            /** Format: date-time */
            date: string;
        };
        Error: {
            name: string;
            message: string;
            stack?: string;
        };
        Result_InverterData_: {
            value: components["schemas"]["InverterData"];
            /** @enum {boolean} */
            success: true;
        } | {
            error: components["schemas"]["Error"];
            /** @enum {boolean} */
            success: false;
        };
        InvertersDataCache: components["schemas"]["Result_InverterData_"][];
        DerSample: {
            status: {
                /** Format: double */
                genConnectStatus: number;
                /** Format: double */
                operationalModeStatus: number;
            };
            settings: {
                /** Format: double */
                setMaxVar: number | null;
                /** Format: double */
                setMaxVA: number | null;
                /** Format: double */
                setMaxW: number;
            };
            nameplate: {
                /** Format: double */
                maxVar: number;
                /** Format: double */
                maxVA: number;
                /** Format: double */
                maxW: number;
                /** Format: double */
                type: number;
            };
            /** Format: double */
            frequency: number | null;
            voltage: {
                /** Format: double */
                phaseC: number | null;
                /** Format: double */
                phaseB: number | null;
                /** Format: double */
                phaseA: number | null;
                /** @enum {string} */
                type: "perPhase";
            } | null;
            reactivePower: {
                /** Format: double */
                net: number;
                /** Format: double */
                phaseC: number | null;
                /** Format: double */
                phaseB: number | null;
                /** Format: double */
                phaseA: number | null;
                /** @enum {string} */
                type: "perPhaseNet";
            } | {
                /** Format: double */
                net: number;
                /** @enum {string} */
                type: "noPhase";
            };
            realPower: {
                /** Format: double */
                net: number;
                /** Format: double */
                phaseC: number | null;
                /** Format: double */
                phaseB: number | null;
                /** Format: double */
                phaseA: number | null;
                /** @enum {string} */
                type: "perPhaseNet";
            } | {
                /** Format: double */
                net: number;
                /** @enum {string} */
                type: "noPhase";
            };
            /** Format: date-time */
            date: string;
        };
        SiteSample: {
            /** Format: double */
            frequency: number | null;
            voltage: {
                /** Format: double */
                phaseC: number | null;
                /** Format: double */
                phaseB: number | null;
                /** Format: double */
                phaseA: number | null;
                /** @enum {string} */
                type: "perPhase";
            };
            reactivePower: {
                /** Format: double */
                net: number;
                /** Format: double */
                phaseC: number | null;
                /** Format: double */
                phaseB: number | null;
                /** Format: double */
                phaseA: number | null;
                /** @enum {string} */
                type: "perPhaseNet";
            } | {
                /** Format: double */
                net: number;
                /** @enum {string} */
                type: "noPhase";
            };
            realPower: {
                /** Format: double */
                net: number;
                /** Format: double */
                phaseC: number | null;
                /** Format: double */
                phaseB: number | null;
                /** Format: double */
                phaseA: number | null;
                /** @enum {string} */
                type: "perPhaseNet";
            } | {
                /** Format: double */
                net: number;
                /** @enum {string} */
                type: "noPhase";
            };
            /** Format: date-time */
            date: string;
        };
        /** @enum {string} */
        InverterControlTypes: "fixed" | "mqtt" | "csipAus" | "twoWayTariff" | "negativeFeedIn" | "batteryChargeBuffer";
        InverterControlLimit: {
            /** Format: double */
            batteryGridChargingMaxWatts?: number;
            batteryGridChargingEnabled?: boolean;
            /** @enum {string} */
            batteryPriorityMode?: "export_first" | "battery_first";
            /** Format: double */
            batteryDischargeMaxWatts?: number;
            /** Format: double */
            batteryChargeMaxWatts?: number;
            /** Format: double */
            batteryExportTargetWatts?: number;
            /** Format: double */
            batteryImportTargetWatts?: number;
            /** Format: double */
            batteryTargetSocPercent?: number;
            /** @enum {string} */
            batteryStorageMode?: "charge" | "discharge" | "hold";
            /** Format: double */
            batteryDischargeRatePercent?: number;
            /** Format: double */
            batteryChargeRatePercent?: number;
            /** Format: double */
            opModLoadLimW?: number;
            /** Format: double */
            opModImpLimW?: number;
            /** Format: double */
            opModExpLimW?: number;
            /** Format: double */
            opModGenLimW?: number;
            opModConnect?: boolean;
            opModEnergize?: boolean;
            source: components["schemas"]["InverterControlTypes"];
        };
        /** @description Construct a type with a set of properties K of type T */
        "Record_csipAus-or-fixed-or-negativeFeedIn-or-twoWayTariff-or-mqtt.InverterControlLimit-or-null_": {
            csipAus: components["schemas"]["InverterControlLimit"];
            fixed: components["schemas"]["InverterControlLimit"];
            negativeFeedIn: components["schemas"]["InverterControlLimit"];
            twoWayTariff: components["schemas"]["InverterControlLimit"];
            mqtt: components["schemas"]["InverterControlLimit"];
        };
        ControlLimitsBySetpoint: components["schemas"]["Record_csipAus-or-fixed-or-negativeFeedIn-or-twoWayTariff-or-mqtt.InverterControlLimit-or-null_"];
        ActiveInverterControlLimit: {
            batteryGridChargingMaxWatts?: {
                source: components["schemas"]["InverterControlTypes"];
                /** Format: double */
                value: number;
            };
            batteryGridChargingEnabled?: {
                source: components["schemas"]["InverterControlTypes"];
                value: boolean;
            };
            batteryPriorityMode?: {
                source: components["schemas"]["InverterControlTypes"];
                /** @enum {string} */
                value: "export_first" | "battery_first";
            };
            batteryDischargeMaxWatts?: {
                source: components["schemas"]["InverterControlTypes"];
                /** Format: double */
                value: number;
            };
            batteryChargeMaxWatts?: {
                source: components["schemas"]["InverterControlTypes"];
                /** Format: double */
                value: number;
            };
            batteryExportTargetWatts?: {
                source: components["schemas"]["InverterControlTypes"];
                /** Format: double */
                value: number;
            };
            batteryImportTargetWatts?: {
                source: components["schemas"]["InverterControlTypes"];
                /** Format: double */
                value: number;
            };
            batteryTargetSocPercent?: {
                source: components["schemas"]["InverterControlTypes"];
                /** Format: double */
                value: number;
            };
            batteryStorageMode?: {
                source: components["schemas"]["InverterControlTypes"];
                /** @enum {string} */
                value: "charge" | "discharge" | "hold";
            };
            batteryDischargeRatePercent?: {
                source: components["schemas"]["InverterControlTypes"];
                /** Format: double */
                value: number;
            };
            batteryChargeRatePercent?: {
                source: components["schemas"]["InverterControlTypes"];
                /** Format: double */
                value: number;
            };
            opModLoadLimW?: {
                source: components["schemas"]["InverterControlTypes"];
                /** Format: double */
                value: number;
            };
            opModImpLimW?: {
                source: components["schemas"]["InverterControlTypes"];
                /** Format: double */
                value: number;
            };
            opModExpLimW?: {
                source: components["schemas"]["InverterControlTypes"];
                /** Format: double */
                value: number;
            };
            opModGenLimW?: {
                source: components["schemas"]["InverterControlTypes"];
                /** Format: double */
                value: number;
            };
            opModConnect?: {
                source: components["schemas"]["InverterControlTypes"];
                value: boolean;
            };
            opModEnergize?: {
                source: components["schemas"]["InverterControlTypes"];
                value: boolean;
            };
        };
        InverterConfiguration: {
            /** @enum {string} */
            type: "disconnect";
        } | {
            /** @enum {string} */
            type: "deenergize";
        } | {
            /** Format: double */
            targetSolarPowerRatio: number;
            /** Format: double */
            targetSolarWatts: number;
            /** Format: double */
            invertersCount: number;
            /** @enum {string} */
            type: "limit";
        };
        CoordinatorResponse: {
            inverterConfiguration: components["schemas"]["InverterConfiguration"] | null;
            controlLimits: {
                activeInverterControlLimit: components["schemas"]["ActiveInverterControlLimit"];
                controlLimitsBySetpoint: components["schemas"]["ControlLimitsBySetpoint"];
            } | null;
            /** Format: double */
            loadWatts: number | null;
            siteSample: components["schemas"]["SiteSample"] | null;
            derSample: components["schemas"]["DerSample"] | null;
            invertersDataCache: components["schemas"]["InvertersDataCache"] | null;
            /** @enum {boolean} */
            running: true;
        } | {
            /** @enum {boolean} */
            running: false;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    sunspecData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        inverterMetrics: {
                            status: {
                                /** Format: double */
                                WAval: number;
                                /** Format: double */
                                VArAval: number;
                                ECPConn: components["schemas"]["ECPConn"];
                                StorConn: components["schemas"]["StorConn"];
                                PVConn: components["schemas"]["PVConn"];
                                ActVArhQ4: string;
                                ActVArhQ3: string;
                                ActVArhQ2: string;
                                ActVArhQ1: string;
                                ActVAh: string;
                                ActWh: string;
                            };
                            settings: {
                                /** Format: double */
                                ECPNomHz: number;
                                /** Format: double */
                                MaxRmpRte: number;
                                /** Format: double */
                                PFMinQ4: number;
                                /** Format: double */
                                PFMinQ3: number;
                                /** Format: double */
                                PFMinQ2: number;
                                /** Format: double */
                                PFMinQ1: number;
                                /** Format: double */
                                WGra: number;
                                /** Format: double */
                                VArMaxQ4: number;
                                /** Format: double */
                                VArMaxQ3: number;
                                /** Format: double */
                                VArMaxQ2: number;
                                /** Format: double */
                                VArMaxQ1: number;
                                /** Format: double */
                                VAMax: number;
                                /** Format: double */
                                VMin: number;
                                /** Format: double */
                                VMax: number;
                                /** Format: double */
                                VRefOfs: number;
                                /** Format: double */
                                VRef: number;
                                /** Format: double */
                                WMax: number;
                            };
                            nameplate: {
                                /** Format: double */
                                MaxDisChaRte: number;
                                /** Format: double */
                                MaxChaRte: number;
                                /** Format: double */
                                AhrRtg: number;
                                /** Format: double */
                                WHRtg: number;
                                /** Format: double */
                                PFRtgQ4: number;
                                /** Format: double */
                                PFRtgQ3: number;
                                /** Format: double */
                                PFRtgQ2: number;
                                /** Format: double */
                                PFRtgQ1: number;
                                /** Format: double */
                                ARtg: number;
                                /** Format: double */
                                VArRtgQ4: number;
                                /** Format: double */
                                VArRtgQ3: number;
                                /** Format: double */
                                VArRtgQ2: number;
                                /** Format: double */
                                VArRtgQ1: number;
                                /** Format: double */
                                VARtg: number;
                                /** Format: double */
                                WRtg: number;
                                DERTyp: components["schemas"]["DERTyp"];
                            };
                            inverter: {
                                /** Format: double */
                                DCW: number;
                                /** Format: double */
                                DCV: number;
                                /** Format: double */
                                DCA: number;
                                /** Format: double */
                                WH: number;
                                /** Format: double */
                                PF: number;
                                /** Format: double */
                                VAr: number;
                                /** Format: double */
                                VA: number;
                                /** Format: double */
                                Hz: number;
                                /** Format: double */
                                W: number;
                                PhVphC: unknown;
                                PhVphB: unknown;
                                /** Format: double */
                                PhVphA: number;
                                PPVphCA: unknown;
                                PPVphBC: unknown;
                                /** Format: double */
                                PPVphAB: number;
                                AphC: unknown;
                                AphB: unknown;
                                /** Format: double */
                                AphA: number;
                                /** Format: double */
                                A: number;
                                /** @enum {string} */
                                phases: "singlePhase";
                            } | {
                                /** Format: double */
                                DCW: number;
                                /** Format: double */
                                DCV: number;
                                /** Format: double */
                                DCA: number;
                                /** Format: double */
                                WH: number;
                                /** Format: double */
                                PF: number;
                                /** Format: double */
                                VAr: number;
                                /** Format: double */
                                VA: number;
                                /** Format: double */
                                Hz: number;
                                /** Format: double */
                                W: number;
                                PhVphC: unknown;
                                /** Format: double */
                                PhVphB: number;
                                /** Format: double */
                                PhVphA: number;
                                PPVphCA: unknown;
                                /** Format: double */
                                PPVphBC: number;
                                /** Format: double */
                                PPVphAB: number;
                                AphC: unknown;
                                /** Format: double */
                                AphB: number;
                                /** Format: double */
                                AphA: number;
                                /** Format: double */
                                A: number;
                                /** @enum {string} */
                                phases: "splitPhase";
                            } | {
                                /** Format: double */
                                DCW: number;
                                /** Format: double */
                                DCV: number;
                                /** Format: double */
                                DCA: number;
                                /** Format: double */
                                WH: number;
                                /** Format: double */
                                PF: number;
                                /** Format: double */
                                VAr: number;
                                /** Format: double */
                                VA: number;
                                /** Format: double */
                                Hz: number;
                                /** Format: double */
                                W: number;
                                /** Format: double */
                                PhVphC: number;
                                /** Format: double */
                                PhVphB: number;
                                /** Format: double */
                                PhVphA: number;
                                /** Format: double */
                                PPVphCA: number;
                                /** Format: double */
                                PPVphBC: number;
                                /** Format: double */
                                PPVphAB: number;
                                /** Format: double */
                                AphC: number;
                                /** Format: double */
                                AphB: number;
                                /** Format: double */
                                AphA: number;
                                /** Format: double */
                                A: number;
                                /** @enum {string} */
                                phases: "threePhase";
                            };
                        }[];
                        invertersData: {
                            mppt: {
                                /** Format: double */
                                TmsPer: number;
                                /** Format: double */
                                N: number;
                                Evt: components["schemas"]["MpptEvt"];
                                /** Format: double */
                                DCWH_SF: number;
                                /** Format: double */
                                DCW_SF: number;
                                /** Format: double */
                                DCV_SF: number;
                                /** Format: double */
                                DCA_SF: number;
                                /** Format: double */
                                L: number;
                                /** @enum {number} */
                                ID: 160;
                                modules: components["schemas"]["MpptModuleModel"][];
                            };
                            status: {
                                /** Format: double */
                                Ris_SF: number;
                                /** Format: double */
                                Ris: number;
                                RtSt: components["schemas"]["RtSt"];
                                /** Format: double */
                                Tms: number;
                                TmSrc: string;
                                StActCtl: components["schemas"]["StActCtl"];
                                StSetLimMsk: components["schemas"]["StSetLimMsk"];
                                /** Format: double */
                                WAval_SF: number;
                                /** Format: double */
                                WAval: number;
                                /** Format: double */
                                VArAval_SF: number;
                                /** Format: double */
                                VArAval: number;
                                ECPConn: components["schemas"]["ECPConn"];
                                StorConn: components["schemas"]["StorConn"];
                                PVConn: components["schemas"]["PVConn"];
                                /** Format: double */
                                L: number;
                                /** @enum {number} */
                                ID: 122;
                                ActVArhQ4: string;
                                ActVArhQ3: string;
                                ActVArhQ2: string;
                                ActVArhQ1: string;
                                ActVAh: string;
                                ActWh: string;
                            };
                            settings: components["schemas"]["SettingsModel"];
                            nameplate: components["schemas"]["NameplateModel"];
                            inverter: components["schemas"]["InverterModel"];
                        }[];
                        meterMetrics: {
                            meter: {
                                PFphC: unknown;
                                PFphB: unknown;
                                /** Format: double */
                                PFphA: number;
                                /** Format: double */
                                PF: number;
                                VARphC: unknown;
                                VARphB: unknown;
                                /** Format: double */
                                VARphA: number;
                                /** Format: double */
                                VAR: number;
                                VAphC: unknown;
                                VAphB: unknown;
                                /** Format: double */
                                VAphA: number;
                                /** Format: double */
                                VA: number;
                                WphC: unknown;
                                WphB: unknown;
                                /** Format: double */
                                WphA: number;
                                /** Format: double */
                                W: number;
                                /** Format: double */
                                Hz: number;
                                PPVphCA: unknown;
                                PPVphBC: unknown;
                                /** Format: double */
                                PPVphAB: number;
                                /** Format: double */
                                PPV: number;
                                PhVphC: unknown;
                                PhVphB: unknown;
                                /** Format: double */
                                PhVphA: number;
                                /** Format: double */
                                PhV: number;
                                AphC: unknown;
                                AphB: unknown;
                                /** Format: double */
                                AphA: number;
                                /** Format: double */
                                A: number;
                                /** @enum {string} */
                                phases: "singlePhase";
                            } | {
                                PFphC: unknown;
                                /** Format: double */
                                PFphB: number;
                                /** Format: double */
                                PFphA: number;
                                /** Format: double */
                                PF: number;
                                VARphC: unknown;
                                /** Format: double */
                                VARphB: number;
                                /** Format: double */
                                VARphA: number;
                                /** Format: double */
                                VAR: number;
                                VAphC: unknown;
                                /** Format: double */
                                VAphB: number;
                                /** Format: double */
                                VAphA: number;
                                /** Format: double */
                                VA: number;
                                WphC: unknown;
                                /** Format: double */
                                WphB: number;
                                /** Format: double */
                                WphA: number;
                                /** Format: double */
                                W: number;
                                /** Format: double */
                                Hz: number;
                                PPVphCA: unknown;
                                PPVphBC: unknown;
                                /** Format: double */
                                PPVphAB: number;
                                /** Format: double */
                                PPV: number;
                                PhVphC: unknown;
                                /** Format: double */
                                PhVphB: number;
                                /** Format: double */
                                PhVphA: number;
                                /** Format: double */
                                PhV: number;
                                AphC: unknown;
                                /** Format: double */
                                AphB: number;
                                /** Format: double */
                                AphA: number;
                                /** Format: double */
                                A: number;
                                /** @enum {string} */
                                phases: "splitPhase";
                            } | {
                                /** Format: double */
                                PFphC: number;
                                /** Format: double */
                                PFphB: number;
                                /** Format: double */
                                PFphA: number;
                                /** Format: double */
                                PF: number;
                                /** Format: double */
                                VARphC: number;
                                /** Format: double */
                                VARphB: number;
                                /** Format: double */
                                VARphA: number;
                                /** Format: double */
                                VAR: number;
                                /** Format: double */
                                VAphC: number;
                                /** Format: double */
                                VAphB: number;
                                /** Format: double */
                                VAphA: number;
                                /** Format: double */
                                VA: number;
                                /** Format: double */
                                WphC: number;
                                /** Format: double */
                                WphB: number;
                                /** Format: double */
                                WphA: number;
                                /** Format: double */
                                W: number;
                                /** Format: double */
                                Hz: number;
                                /** Format: double */
                                PPVphCA: number;
                                /** Format: double */
                                PPVphBC: number;
                                /** Format: double */
                                PPVphAB: number;
                                /** Format: double */
                                PPV: number;
                                /** Format: double */
                                PhVphC: number;
                                /** Format: double */
                                PhVphB: number;
                                /** Format: double */
                                PhVphA: number;
                                /** Format: double */
                                PhV: number;
                                /** Format: double */
                                AphC: number;
                                /** Format: double */
                                AphB: number;
                                /** Format: double */
                                AphA: number;
                                /** Format: double */
                                A: number;
                                /** @enum {string} */
                                phases: "threePhase";
                            };
                        };
                        metersData: {
                            meter: components["schemas"]["MeterModel"];
                            common: components["schemas"]["CommonModel"];
                        };
                    };
                };
            };
        };
    };
    siteRealPower: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: double */
                        _value: number;
                        _time: string;
                        type: string;
                        phase: string;
                    }[];
                };
            };
        };
    };
    derRealPower: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: double */
                        _value: number;
                        _time: string;
                        type: string;
                        phase: string;
                    }[];
                };
            };
        };
    };
    loadRealPower: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: double */
                        _value: number;
                        _time: string;
                        type: string;
                        phase: string;
                    }[];
                };
            };
        };
    };
    exportLimit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        control: string;
                        /** Format: double */
                        _value: number;
                        _time: string;
                        _measurement: string;
                        name: string;
                    }[];
                };
            };
        };
    };
    generationLimit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        control: string;
                        /** Format: double */
                        _value: number;
                        _time: string;
                        _measurement: string;
                        name: string;
                    }[];
                };
            };
        };
    };
    importLimit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        control: string;
                        /** Format: double */
                        _value: number;
                        _time: string;
                        _measurement: string;
                        name: string;
                    }[];
                };
            };
        };
    };
    loadLimit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        control: string;
                        /** Format: double */
                        _value: number;
                        _time: string;
                        _measurement: string;
                        name: string;
                    }[];
                };
            };
        };
    };
    connection: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        _value: boolean;
                        _time: string;
                        _measurement: string;
                        name: string;
                    }[];
                };
            };
        };
    };
    energize: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        _value: boolean;
                        _time: string;
                        _measurement: string;
                        name: string;
                    }[];
                };
            };
        };
    };
    csipAusStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CertificateIds"];
                };
            };
        };
    };
    exportLimitSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RandomizedControlSchedule"][];
                };
            };
        };
    };
    generationLimitSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RandomizedControlSchedule"][];
                };
            };
        };
    };
    importLimitSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RandomizedControlSchedule"][];
                };
            };
        };
    };
    loadLimitSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RandomizedControlSchedule"][];
                };
            };
        };
    };
    connectionSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RandomizedControlSchedule"][];
                };
            };
        };
    };
    energizeSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RandomizedControlSchedule"][];
                };
            };
        };
    };
    coordinatorStart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    coordinatorStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CoordinatorResponse"];
                };
            };
        };
    };
    coordinatorStop: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
